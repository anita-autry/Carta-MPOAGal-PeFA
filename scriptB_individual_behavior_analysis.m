%% Isolate perievents on specific behaviors
%% Author: Ilaria Carta
% works with variables generated by scriptA, run immediately after scriptA
% process each experiment individually

mouse_trial_ID = 'G7F2_pup';                                               %specify mouse ID and trial
behavior_scored = pupgroom;                                                %choose behavior here
behavior_name = 'pupgrooming';
current_name = strcat(mouse_trial_ID,'_results_',behavior_name);           %combine mouseID and behavior name to save results
C=cell(1,5);                                                               %create a cell array to hold final results

%specify folder to save data
data_path = 'C:\Users\user_domain\datafolder';                             %specify data path
savdir = data_path; 

figure

subplot(3,2,1:2)
first_bin=1:length(data1);
plot(first_bin(start_trace:end_trace),norm_GCamP_trace(start_trace:end_trace),'k','LineWidth',1.5);
hold on

match_length = length(norm_GCamP_trace(start_trace:end_trace));
behavior_scored_cut = behavior_scored(start_ethogram:end_ethogram);
idx = 1:length(behavior_scored_cut);
idxq = linspace(min(idx), max(idx), match_length);                         % Interpolation Vector
matched_behavior_scored = interp1(idx, behavior_scored_cut, idxq, 'linear');             % Downsampled interpolated vector
       
lh=plot(first_bin(start_trace:end_trace),matched_behavior_scored, 'r'); lh.Color(4)=0.1;             % plot interpolated grooming vector on top of recording
area(first_bin(start_trace:end_trace),matched_behavior_scored, 'FaceColor', [1,0,0], 'FaceAlpha', 0.1,'edgealpha',0.1);
axis tight
%xlim ([start_trace end_trace]);
ylim ([0 0.01]);                                                           %customize axis based on trace min/max
box off

matched_behavior_scored_true = matched_behavior_scored==1;
matched_behavior_scored_false = matched_behavior_scored==0;

GCamP_cropped=norm_GCamP_trace(start_trace:end_trace);
first_bin_cropped=1:length(GCamP_cropped);

matched_behavior_scored_true_cropped=matched_behavior_scored_true;
matched_behavior_scored_false_cropped=matched_behavior_scored_false;

merged_grooming_segments = GCamP_cropped(matched_behavior_scored_true_cropped');
merged_non_grooming_segments = GCamP_cropped(GCamP_cropped & matched_behavior_scored_false_cropped');
means_to_compare = [mean(merged_non_grooming_segments) mean(merged_grooming_segments)];


subplot(3,2,3:4)

plot(first_bin_cropped,GCamP_cropped,'k','LineWidth',1.5);
hold on
axis tight
%% for loop to find onset of grooming events and create perievent around it

a = matched_behavior_scored;
b = GCamP_cropped;
onset_event =zeros(1,length(a));

for i=1:length(a)                                                          %for loop to find event onsets
if a(1,i)==0  
    onset_event(i) = 0; 
elseif a(1,i)==1 && a(1,i)>a(1,i-1)
    onset_event(i) = 2; 
elseif a(1,i)==1 && a(1,i)==a(1,i-1)
    onset_event(i) = 0;
else
    onset_event(i) = 0;    
end
end 

 
%If events with a baseline overlapping with a previous behavior are
%present, we can filter them out (*optional)

filtered_onset_event = zeros(1,length(a));

for i=1:length(onset_event)                                                %for loop to find event onsets with restricted criteria (the baseline should not overlap with an event occurring in the previous 5s)
     if i<=100
         filtered_onset_event(i)= 0;
         
     elseif i>100
         if onset_event(1,i)==2 && onset_event(1,i)>sum(onset_event(1,i-200:i-1))
             filtered_onset_event(i) = 2;
         elseif onset_event(1,i)==2 && onset_event(1,i)<=sum(onset_event(1,i-200:i-1))
              filtered_onset_event(i) = 0;
         else
             filtered_onset_event(i) = 0;
         end
     end

end



maximum = max(max(filtered_onset_event));
[p,q]=find(filtered_onset_event==maximum);  
l=length(q);

plot(1:length(filtered_onset_event), filtered_onset_event, 'g'); 
axis tight
ylim ([0 0.01]);
rate=20;
perievent_duration=rate*20+1;

perievents=zeros(l,perievent_duration);
  
for j=1:l-1                                                                %%if last event is too close to the end of the file use: for j=1:l-1, otherwise j=1:l
    c=q(j);
    if c<=length(behavior_scored_cut)-101 
    perievents(j,:)=b((c-100):(c+300));                                    %100 datapoints (5s)before onset and 100(5s) after onset 
    end
end


%perievents=perievents(1:5,:);

subplot(3,2,6)
plot(1:perievent_duration,perievents(1,:),'k','Linewidth',2);
hold on
plot(1:perievent_duration,perievents,'r')
axis tight
%plot(1:201,mean(perievents),'Linewidth',2)
%figure
subplot(3,2,5)
%bar(means_to_compare_t3);
bar(means_to_compare/means_to_compare(1,1)*100);
ylabel('% \DeltaF/F change')
ylim([0 200]);
xticklabels({'no grooming','grooming'});
xtickangle(45);
perievents = perievents(1:end,:);                                          %% change to 2:end if need to separate later from 1st event                            

savdir = data_path;
save(fullfile(savdir,current_name), 'perievents');

